"use strict";

var _ = require('dry-underscore');

var db_class = require('../');

var eq = _.test.eq;
var ok = _.test.ok;

suite('db');

function no_id(docs){
    if(_.isArray(docs)){
        return _.map(docs, no_id);
    }else if(_.isObject(docs) && !docs._id){
        return _.omap(docs, function(emit, v, k){
            emit(no_id(v), k);
        });
    }
    return _.omit(docs, "_id");
}

test("no_id", function(){
    eq(no_id({ _id: "bad", foo: true }), { foo: true });
    eq(no_id([{ _id: "bad", foo: true }, { _id: "bad", bar: true }]), [{ foo: true }, { bar: true }]);
    eq(no_id({ "foo": { _id: "bad", foo: true }, "bar": { _id: "bad", bar: true } }), { "foo": { foo: true }, "bar": { bar: true } });
});


function one(v){ return(_.jclone({ id: 1, value: _.undef(v) ? 1 : v })); }
function two(v){ return(_.jclone({ id: 2, value: _.undef(v) ? 2 : v })); }
function three(v){ return(_.jclone({ id: 3, value: _.undef(v) ? 3 : v })); }
var _one = one;
var _two = two;
var _three = three;
function docs(){ return([ one(), two(), three() ]); }

test('collections', function(done){

    var cols = { foo: true, bar: true };

    var db = new db_class(cols);

    eq(db.collections(), cols);

    db.foo.index("_id", done);

});

test("find", function(done){

    var db = new db_class({ test: true });

    await{ db.test.remove(_.plumb(defer(), done)); }

    await{ db.test.insert(docs(), _.plumb(defer(), done)); }

    var results = null;

    await{ db.test.count(_.plumb(defer(results), done)); }
    eq(results, 3);

    await{ db.test.count({ id: 1 }, _.plumb(defer(results), done)); }
    eq(results, 1);

    await{ db.test.find(_.plumb(defer(results), done)); }

    eq(no_id(results), docs());

    await{ db.test.find({ id: 1 }, _.plumb(defer(results), done)); }

    eq(no_id(results), [one()]);

    await{ db.test.find_one({ id: 1 }, _.plumb(defer(results), done)); }

    eq(no_id(results), one());

    await{ db.test.find_one({ id: "not-found" }, _.plumb(defer(results), done)); }

    eq(results, null);

    done();
});

test("find_index", function(done){

    var db = new db_class({ test: true });

    var one = _.partial(_one, 2);
    var two = _.partial(_two, 4);
    var three = _.partial(_three, 6);
    
    await{ db.test.remove(_.plumb(defer(), done)); }

    await{ db.test.insert([ one(), two(), three() ], _.plumb(defer(), done)); }

    var results = null;

    await{ db.test.find_index(_.plumb(defer(results), done)); }

    eq(no_id(results), { 1: one(), 2: two(), 3: three() });

    await{ db.test.find_index({}, _.plumb(defer(results), done)); }

    eq(no_id(results), { 1: one(), 2: two(), 3: three() });

    await{ db.test.find_index({}, {}, _.plumb(defer(results), done)); }

    eq(no_id(results), { 1: one(), 2: two(), 3: three() });

    await{ db.test.find_index(_.plumb(defer(results), done), "value"); }

    eq(no_id(results), { 2: one(), 4: two(), 6: three() });

    await{ db.test.find_index({}, {}, _.plumb(defer(results), done), "value"); }

    eq(no_id(results), { 2: one(), 4: two(), 6: three() });

    await{ db.test.find_index({ id: 1 }, { fields: { id: 1 } }, _.plumb(defer(results), done), "id"); }

    eq(no_id(results), { 1: { id: 1 } });

    await{ db.test.find_group({}, {}, _.plumb(defer(results), done), "value"); }

    eq(no_id(results), { 2: [one()], 4: [two()], 6: [three()] });

    done();
});

test("update", function(done){

    var db = new db_class({ test: true });

    var results = null;

    await{ db.test.remove(_.plumb(defer(results), done)); }
    eq(results.n, 3);

    await{ db.test.insert(docs(), _.plumb(defer(results), done)); }
    eq(results.n, 3);

    await{ db.test.find(_.plumb(defer(results), done)); }

    eq(no_id(results), docs());

    await{ db.test.update({ id: { $in: [1, 2] } }, { $set: { value: 4 } }, { multi: true, safe: true }, _.plumb(defer(results), done)); }
    eq(results.n, 2);

    await{ db.test.find({ id: { $in: [1, 2] } }, _.plumb(defer(results), done)); }

    eq(no_id(results), [one(4), two(4)]);

    var update_one_meta_result = null;
    await{ db.test.update_one({ id: "not-found" }, { id: { $set: "found" } }, _.plumb(defer(results, update_one_meta_result), done)); }

    eq(results, null);
    eq(update_one_meta_result.n, 0);

    await{ db.test.update_one({ id: 1 }, { $set: { value: 6 } }, { new: true }, _.plumb(defer(results, update_one_meta_result), done)); }

    eq(no_id(results), one(6));
    eq(update_one_meta_result.n, 1);

    await{ db.test.find_one({ id: 1 }, _.plumb(defer(results), done)); }

    eq(no_id(results), one(6));

    done();
});

