"use strict";

var _ = require('dry-underscore');

var db_class = require('../');

var eq = _.test.eq;
var ok = _.test.ok;

suite('db');

// used to strip _id, but now we use an outgoing_processor
function no_id(docs){ return(docs); }

function one(v){ return(_.jclone({ id: 1, value: _.undef(v) ? 1 : v })); }
function two(v){ return(_.jclone({ id: 2, value: _.undef(v) ? 2 : v })); }
function three(v){ return(_.jclone({ id: 3, value: _.undef(v) ? 3 : v })); }
var _one = one;
var _two = two;
var _three = three;
function docs(){ return([ one(), two(), three() ]); }

test('url', function(done){

   var url = "mongodb://localhost:27017?"

   var cols = { foo: true };

    var db = new db_class(cols, { url });

    eq(db.url(), url);

    eq(db.collections(), cols);

    db.foo.index("_id", done);
});

test('collections', function(done){

    var cols = { foo: true, bar: true };

    var db = new db_class(cols);

    eq(db.collections(), cols);

    db.foo.index("_id", done);

});

test("cursor", function(done){

    var db = new db_class({ test: true });

    db.outgoing_processor(function(doc){ return _.omit(doc, "_id"); });

    await{ db.test.remove(_.plumb(defer(), done)); }

    await{ db.test.insert(docs(), _.plumb(defer(), done)); }
    await{ db.test.cursor({}, { sort: ["id"] }, _.plumb(defer(var cursor), done)); }

    var i = 0;
    function loop(){
        cursor.next(function(err, doc){
            if(err){ return done(err); }
            if(!doc){ eq(i, 3); return done(); }
            eq(docs()[i], doc);
            i++;
            loop();
        });
    }

    loop();
});

test("find", function(done){

    var db = new db_class({ test: true });

    db.outgoing_processor(function(doc){ return _.omit(doc, "_id"); });
    db.outgoing_processor(function(doc){ return doc; });
    db.incoming_processor(function(doc){ doc.added = true; return doc; });

    function added(doc){ 
        if(_.isArray(doc)){ return(_.map(doc, added)); }
        doc.added = true; 
        return(doc);
    }

    var results = null;

    await{ db.test.remove(_.plumb(defer(), done)); }

    await{ db.test.insert(one(), _.plumb(defer(), done)); }

    await{ db.test.count(_.plumb(defer(results), done)); }
    eq(results, 1);

    await{ db.test.remove(_.plumb(defer(), done)); }

    await{ db.test.insert(docs(), _.plumb(defer(), done)); }

    await{ db.test.count(_.plumb(defer(results), done)); }
    eq(results, 3);

    await{ db.test.count({ id: 1 }, _.plumb(defer(results), done)); }
    eq(results, 1);

    await{ db.test.find(_.plumb(defer(results), done)); }

    eq(no_id(results), added(docs()));

    await{ db.test.find({ id: 1 }, _.plumb(defer(results), done)); }

    eq(no_id(results), [added(one())]);

    await{ db.test.find_one({ id: 1 }, _.plumb(defer(results), done)); }

    eq(no_id(results), added(one()));

    await{ db.test.find_one({ id: "not-found" }, _.plumb(defer(results), done)); }

    eq(results, null);

    done();
});

test("find_index", function(done){

    var db = new db_class({ test: true });

    db.outgoing_processor(function(doc){ return _.omit(doc, "_id"); });

    var one = _.partial(_one, 2);
    var two = _.partial(_two, 4);
    var three = _.partial(_three, 6);
    
    await{ db.test.remove(_.plumb(defer(), done)); }

    await{ db.test.insert([ one(), two(), three() ], _.plumb(defer(), done)); }

    var results = null;

    await{ db.test.find_index(_.plumb(defer(results), done)); }

    eq(no_id(results), { 1: one(), 2: two(), 3: three() });

    await{ db.test.find_index({}, _.plumb(defer(results), done)); }

    eq(no_id(results), { 1: one(), 2: two(), 3: three() });

    await{ db.test.find_index({}, {}, _.plumb(defer(results), done)); }

    eq(no_id(results), { 1: one(), 2: two(), 3: three() });

    await{ db.test.find_index(_.plumb(defer(results), done), "value"); }

    eq(no_id(results), { 2: one(), 4: two(), 6: three() });

    await{ db.test.find_index({}, {}, _.plumb(defer(results), done), "value"); }

    eq(no_id(results), { 2: one(), 4: two(), 6: three() });

    await{ db.test.find_index({ id: 1 }, { fields: { id: 1 } }, _.plumb(defer(results), done), "id"); }

    eq(no_id(results), { 1: { id: 1 } });

    await{ db.test.find_group({}, {}, _.plumb(defer(results), done), "value"); }

    eq(no_id(results), { 2: [one()], 4: [two()], 6: [three()] });

    done();
});

test("update", function(done){

    var db = new db_class({ test: true });

    db.test.outgoing_processor(function(doc){ return _.omit(doc, "_id"); });

    var results = null;

    await{ db.test.remove(_.plumb(defer(results), done)); }
    eq(results.n, 3);

    await{ db.test.insert(docs(), _.plumb(defer(results), done)); }
    eq(results.n, 3);

    await{ db.test.find(_.plumb(defer(results), done)); }

    eq(no_id(results), docs());

    await{ db.test.update({ id: { $in: [1, 2] } }, { $set: { value: 4 } }, { w: "majority" }, _.plumb(defer(results), done)); }
    eq(results.n, 2);

    await{ db.test.find({ id: { $in: [1, 2] } }, _.plumb(defer(results), done)); }

    eq(no_id(results), [one(4), two(4)]);

    var update_one_meta_result = null;
    await{ db.test.update_one({ id: "not-found" }, {  $set: { id: "found" } }, _.plumb(defer(results, update_one_meta_result), done)); }

    eq(results, null);
    eq(update_one_meta_result.n, 0);

    await{ db.test.update_one({ id: 1 }, { $set: { value: 6 } }, { returnOriginal: false }, _.plumb(defer(results, update_one_meta_result), done)); }

    eq(no_id(results), one(6));
    eq(update_one_meta_result.n, 1);

    await{ db.test.find_one({ id: 1 }, _.plumb(defer(results), done)); }

    eq(no_id(results), one(6));

    done();
});
